//lookoutttt

class Solution {
    List<Integer> list=  new ArrayList<>();
    public void solve(TreeNode root){
        if(root==null) return;

        solve(root.left);
        list.add(root.val);
        solve(root.right);
        
    }
    
    public int minDiffInBST(TreeNode root) {
        int dif = Integer.MAX_VALUE;
        solve(root);
        for(int i = 0;i<list.size()-1;i++){
            int n = list.get(i), m = list.get(i+1);
            dif = Math.min(dif,m-n);    
        }
        
        return dif;
        
    }
}
----------------------------------------------------------------------------------------------------------------------
//inorder

class Solution {
    
    int mini=Integer.MAX_VALUE;

    public void find(TreeNode root,ArrayList<Integer>arr){
    
    if(root==null){
        return;
    }
    
    
    arr.add(root.val);
    
    find(root.left,arr);
    
    for(int i=arr.size()-2;i>=0;i--){
    
        mini=Math.min(mini,Math.abs(root.val-arr.get(i)));
    }
    
    find(root.right,arr);
    
    arr.remove(arr.size()-1);
    }

    public int minDiffInBST(TreeNode root) {
    ArrayList<Integer>arr=new ArrayList<>();
    find(root,arr);
    return mini;    
    }
}
