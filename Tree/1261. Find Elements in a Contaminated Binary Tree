//dfs
class FindElements {

    TreeNode root;

    static void recover(TreeNode root){
        if(root==null) return;

        int x = root.val;
        if(root.left!=null) root.left.val = 2*x+1;
        if(root.right!=null) root.right.val = 2*x+2;
        recover(root.left);
        recover(root.right);
    }

    static boolean check(TreeNode root, int a){
        if(root==null) return false;
        if(root.val==a) return true;

        return check(root.left,a) || check(root.right,a);
    }

    public FindElements(TreeNode x) {
        root = x;
        root.val = 0;
        recover(root);
    }
    
    public boolean find(int target) {
        return check(root,target);
    }
}
----------------------------------------------------------------------------------------------------------------
//dfs using hashset

class FindElements {
    TreeNode root;
    Set<Integer> set = new HashSet<>();
    public FindElements(TreeNode root) {
        this.root = root;
        if(root != null){ root.val = 0; set.add(root.val); }
        recover(root,set);
    }
    
    public boolean find(int target) {
      return set.contains(target);
    }

    private void recover(TreeNode root, Set<Integer> set){
        if(root.left != null){
            root.left.val = 2 * root.val + 1;
            set.add(root.left.val);
            recover(root.left, set);
        }
       if(root.right != null){
            root.right.val = 2 * root.val + 2;
            set.add(root.right.val);
            recover(root.right, set);
       } 
    }
}
