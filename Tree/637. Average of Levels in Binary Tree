class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> average = new ArrayList<Double>();
        if (root == null)
            return average;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            double sum = 0.0;
            for (int i = 0; i < levelSize; i++) {
                TreeNode node = queue.poll();
                sum += node.val;
                
                if (node.left != null) queue.add(node.left);
                if (node.right != null) queue.add(node.right);
            }
            average.add(sum / levelSize);
        }
        return average;
    }
}
/*
class Solution {
    
    List<double[]> store = new ArrayList<>(); // it will store sum, no. of nodes at each level
    public List<Double> averageOfLevels(TreeNode root) {
        
        List<Double> res = new ArrayList<>();
        traverse(root, 0);
        for(double[] cur: store){
            res.add(cur[0]/cur[1]);
        }
        return res;
    }
    
    private void traverse(TreeNode node, int level){
        
        if(node == null) return;
        
        if(store.size() <= level) store.add(new double[2]);
        
        // update sum and no. of nodes at curlevel
        store.get(level)[0] += node.val;
        store.get(level)[1]++;
        
        traverse(node.left, level+1);
        traverse(node.right, level+1);
    }
}*/
