//inorder dfs

class BSTIterator {
    Queue<Integer> qu;
    public BSTIterator(TreeNode root) {
        qu=new LinkedList<>();
        inOrder(root);
    }
    public void inOrder(TreeNode root){
      if(root==null)return;
      inOrder(root.left);
      qu.add(root.val);
      inOrder(root.right);
    }
    
    public int next() {
        return qu.remove();
    }
    
    public boolean hasNext() {
        return !qu.isEmpty();
    }
}
-------------------------------------------------------------------------------------------------------------------

//stack intrutive solution

class BSTIterator {
    Stack<TreeNode> stack;
    public BSTIterator(TreeNode root) {
        stack = new Stack<>();
        push(root);
    }
    
    private void push(TreeNode node){
        while(node != null){
            stack.push(node);
            node = node.left;
        }
    }
    
    public int next() {
        TreeNode node = stack.pop();
        push(node.right);
        return node.val;
    }
    
    public boolean hasNext() {
        return !stack.isEmpty();
    }
}
*/
