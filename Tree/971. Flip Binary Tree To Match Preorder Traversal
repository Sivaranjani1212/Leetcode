//dfs

class Solution {
    int vix = 0;
    List<Integer> ans = new ArrayList<>();
    private void dfs(TreeNode node, int[] V) {
        if (node == null || (ans.size() != 0 && ans.get(0) == -1)) return;
        if (node.val != V[vix++]){
           // cannot be equalent -> return -1 in list
            ans = new ArrayList<Integer>(Arrays.asList(-1));
            return;
        }
        else if (node.left != null && node.left.val != V[vix]) {
            ans.add(node.val);
            dfs(node.right, V);
            dfs(node.left, V);
        } else {
            dfs(node.left, V);
            dfs(node.right, V);
        }
    }
    public List<Integer> flipMatchVoyage(TreeNode root, int[] V) {
        dfs(root, V);
        return ans;
    }
}
----------------------------------------------------------------------------------------------------------------
//dfs

class Solution {
    int res=0;
    public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {
      List<Integer> arr = new ArrayList<Integer>();
        return help(root,voyage,arr)?arr : Arrays.asList(-1);
            
    }
    public boolean help(TreeNode node, int[]dummy,List<Integer> arr){
        if (node==null) return true;
        if(node.val != dummy[res]) return false;
        res++;
        if(node.left!=null && node.left.val!=dummy[res]){
            arr.add(node.val);
            return help(node.right,dummy,arr) && help(node.left,dummy,arr);
        }
       return help(node.left,dummy,arr) && help(node.right,dummy,arr);

    }
}*/
