//dfs

class Solution {
    List<List<Integer>> res;
    void solve(Node cur, int level){
        if(cur == null)
            return ;
        if(level >= res.size()){
            res.add(new ArrayList<Integer>());
        }
        res.get(level).add(cur.val);
        for(int i=0;i<cur.children.size();i++){
            solve(cur.children.get(i), level+1);
        }
    }
    public List<List<Integer>> levelOrder(Node root) {
        res = new ArrayList<>();
        solve(root, 0);
        return res;
    }
}

-----------------------------------------------------------------------------------------------------------------------
//bfs

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        List<List<Integer>> answer = new ArrayList<>();
        while(!queue.isEmpty()) {
            int level = queue.size();
            List<Integer> levelNodes = new ArrayList<>();
            for(int i = 0; i < level; i++) {
                Node node = queue.poll();
                if (node != null) {
                    levelNodes.add(node.val);
                    List<Node> children = node.children;
                    if (!children.isEmpty()) {
                        for(Node child: children) {
                            queue.add(child);
                        }
                    }
                }
            }
            if (!levelNodes.isEmpty()) {
                answer.add(levelNodes);
            }
        }
        return answer;
    }
}
