
-----> Recursive

class Solution {
    public boolean isSymmetric(TreeNode root) {
        return helper(root.left,root.right);
    }
    public boolean helper(TreeNode leftNode,TreeNode rightNode){
        if(leftNode == null || rightNode == null) return leftNode==rightNode;
        if(leftNode.val!=rightNode.val) return false;
        return helper(leftNode.left,rightNode.right) && helper(leftNode.right,rightNode.left);
    }
}

----> Iterative solution with queue


public boolean isSymmetric(TreeNode root) {
        if(root == null)
            return true;
        Queue<TreeNode> q = new LinkedList();
       
        q.add(root.left);
        q.add(root.right);
        while(!q.isEmpty()){
            TreeNode left = q.poll();
            TreeNode right = q.poll();
            if(left == null && right == null)
                continue;
            if(left == null || right == null ||left.val != right.val )
                return false;
            q.add(left.left);
            q.add(right.right);
            q.add(left.right);
            q.add(right.left);
            
        }
        return true;
            
    }
