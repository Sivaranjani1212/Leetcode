//dfs preorder

class Solution {
    int maxHeight = Integer.MIN_VALUE;
    int ans = 0;
    public int findBottomLeftValue(TreeNode root) {
        dfs(root , 0);
        return ans;
    }

    public void dfs(TreeNode node , int height){
        if (node == null) return;
        if (height > maxHeight){
            maxHeight = height;
            ans = node.val;
        }

        dfs(node.left , height+1);
        dfs(node.right , height+1);
    }
}
-------------------------------------------------------------------------------------------------------------------
//bfs

class Solution 
{
    public int findBottomLeftValue(TreeNode root) 
    {
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        int i=0,result=0;
        while(q.isEmpty() == false)
        {
            int count=q.size();
            for(i=0;i<count;i++)
            {
                TreeNode curr=q.poll();
                if(i==0)
                    result=curr.val;
                if(curr.left!=null)
                    q.add(curr.left);
                if(curr.right!=null)
                    q.add(curr.right);
            }
        }
        return result;
    }
}
