//dfs postorder

class Solution {
    public TreeNode pruneTree(TreeNode root) {
        TreeNode ans = postOrder(root);
        return ans;
    }
    private TreeNode postOrder(TreeNode root) {
        if (root == null) {
            return null;
        }
        TreeNode left = postOrder(root.left);
        TreeNode right = postOrder(root.right);
        if (left == null) {
            root.left = null;
        }
        if (right == null) {
            root.right = null;
        }
        if (left == null && right == null && root.val == 0) {
            root = null;
            return null;
        }
        return root;
    }
}
-------------------------------------------------------------------------------------------------------------------
//preorder

class Solution {

    static boolean contains(TreeNode root){
        if(root==null) return false;
        if(root.val==1) return true;

        return contains(root.right) || contains(root.left);
    }
    static void helper(TreeNode root){
        if(root==null) return;

        if(!contains(root.left)) root.left = null;
        if(!contains(root.right)) root.right = null;

        helper(root.right);
        helper(root.left);
    }

    public TreeNode pruneTree(TreeNode root) {
        helper(root);
        if(root.left==null && root.right==null && root.val==0) return null;
        return root;
    }
}
