//brute force

class Solution {
    private Map<Integer, Integer> leftMap = new HashMap<>();
    private Map<Integer, Integer> rightMap = new HashMap<>();
    private Map<Integer, Integer> removed = new HashMap<>();
    
    public int[] treeQueries(TreeNode root, int[] queries) {
        populateHeights(root, 0);
        calculateRemovedHeights(root, 0);
        
        int[] output = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            output[i] = removed.get(queries[i]);
        }
        return output;
    }
    
	// height is the max tree height with this node removed
    private void calculateRemovedHeights(TreeNode node, int height) {
        if (node == null) {
            return;
        }
        removed.put(node.val, height);
		
		// for each child, the height when removed is the max of the the height following
		// the opposite child, or the passed-in height with this node removed
        calculateRemovedHeights(node.left, Math.max(height, rightMap.get(node.val)));
        calculateRemovedHeights(node.right, Math.max(height, leftMap.get(node.val)));
    }
//postorder

	// populate the maps with the total height of the left and right subtree of
	// each node, and return the larger of the two values
    private int populateHeights(TreeNode node, int height) {
        if (node == null) {
            return height - 1;
        }
        
        leftMap.put(node.val, populateHeights(node.left, height + 1));
        rightMap.put(node.val, populateHeights(node.right, height + 1));
        
        return Math.max(leftMap.get(node.val), rightMap.get(node.val));
    }
}
--------------------------------------------------------------------------------------------------------------------------
// 2 pass from left and right cal the max
//preorder

class Solution {
    int leftMax;
    int rightMax;
    // HashMap<Integer, Integer> allLevel;
    int[] allL;
    public int[] treeQueries(TreeNode root, int[] queries) {
        leftMax = 0;
        rightMax = 0;
        // allLevel = new HashMap<>();
        allL = new int[100001];
        int[] res = new int[queries.length];
        dfsLeft(root, 0);
        dfsRight(root, 0);
        for(int i = 0; i < queries.length; i++){
            res[i] = allL[queries[i]];
        }
        return res;
    }
    
    public void dfsLeft(TreeNode root, int level){
        if(root == null) return;
        allL[root.val] = leftMax;
        leftMax = Math.max(leftMax, level);
        dfsLeft(root.left, level + 1);
        dfsLeft(root.right, level + 1);
    }
    
     public void dfsRight(TreeNode root, int level){
        if(root == null) return;
        allL[root.val] = Math.max(rightMax, allL[root.val]);
        rightMax = Math.max(rightMax, level);
        dfsRight(root.right, level + 1);
        dfsRight(root.left, level + 1);
    }
}
