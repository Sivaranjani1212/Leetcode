//dfs basic

class Solution {
    public boolean findTarget(TreeNode root, int k) {
        List<Integer> nums = new ArrayList<>();
        inorder(root, nums);
        for(int i = 0, j = nums.size()-1; i<j;){
            if(nums.get(i) + nums.get(j) == k)return true;
            if(nums.get(i) + nums.get(j) < k)i++;
            else j--;
        }
        return false;
    }
    
    public void inorder(TreeNode root, List<Integer> nums){
        if(root == null)return;
        inorder(root.left, nums);
        nums.add(root.val);
        inorder(root.right, nums);
    }
}

---------------------------------------------------------------------------------------------------------------------
//dfs intrutive

class Solution {
    public boolean findTarget(TreeNode root, int k) {
        return dfs(root, root, k);
    }
    private boolean dfs(TreeNode root, TreeNode cur, int target) {
        if(cur == null) return false;
        return search(root, cur, target - cur.val) ||
               dfs(root, cur.left, target) ||
               dfs(root, cur.right, target);
    }
    private boolean search(TreeNode root, TreeNode cur, int target) {
        if(root == null) return false;
        return (root.val == target && cur != root)||
               (target > root.val && search(root.right, cur, target)) || 
               (target < root.val && search(root.left, cur, target));
    }
}*/
