class Solution {
    List<Integer> l1=new LinkedList<>();
    List<Integer> l2=new LinkedList<>();
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        helper(root1,l1);
        helper(root2,l2);
        if(l1.size()!=l2.size()) return false;
        for(int i=0;i<l1.size();i++){
            if(l1.get(i)!=l2.get(i)) return false;
        }
        return true;
    }
    public void helper(TreeNode root,List<Integer> l){
        if(root==null) return;
        if(root.left==null && root.right==null){
              l.add(root.val);
              return;
        }
        helper(root.left,l);
        helper(root.right,l);
    }
}
/*
class Solution {
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        Stack<TreeNode> stack1 = new Stack();
        stack1.push(root1);
        
        Stack<TreeNode> stack2 = new Stack();
        stack2.push(root2);
        
        while(stack1.size()>0 && stack2.size()>0){
            TreeNode curr1 = getLeafNode(stack1);
            TreeNode curr2 = getLeafNode(stack2);
            
            if(curr1.val!=curr2.val) return false;
        }
        
        if(stack1.size()==0 && stack2.size()==0) return true;
        else return false;
    }
    
    private TreeNode getLeafNode(Stack<TreeNode> stack){
        while(stack.size()>0){
            TreeNode curr = stack.pop();
            
            TreeNode left = curr.left;
            TreeNode right = curr.right;
            
            if(left==null && right==null) return curr;
            
            if(right!=null) stack.push(right);
            if(left!=null) stack.push(left);
        }
        
        return null;
    }
}
// Solution - 3 : Morris traversal

// TC : O(nodes)
// SC : O(1)

class Solution {
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        TreeNode curr[] = new TreeNode[2];
        
        TreeNode dummy1 = new TreeNode(-1);
        dummy1.left = root1;
        curr[0] = dummy1;
        
        TreeNode dummy2 = new TreeNode(-1);
        dummy2.left = root2;
        curr[1] = dummy2;
        
        while(curr[0]!=null || curr[1]!=null){
            int currLeafNodeVal1 = getLeafNodeVal(curr, 0);
            int currLeafNodeVal2 = getLeafNodeVal(curr, 1);
            
            if(currLeafNodeVal1!=currLeafNodeVal2) return false;
        }
        
        dummy1.left = null;
        dummy2.left = null;
        
        return true;
    }
    
    private int getLeafNodeVal(TreeNode curr[], int idx){
        while(curr[idx]!=null){
            if(curr[idx].left==null){
                curr[idx] = curr[idx].right;
            }else{
                TreeNode temp = curr[idx].left;
                
                while(temp.right!=null && temp.right!=curr[idx]) temp = temp.right;
                
                if(temp.right==null){
                    temp.right = curr[idx];
                    curr[idx] = curr[idx].left;
                }else{
                    temp.right = null;
                    
                    int val = temp.val;
                    boolean isLeafNode = false;
                    
                    if(temp.left==null && temp.right==null) isLeafNode = true;
                    
                    curr[idx] = curr[idx].right;
                    
                    if(isLeafNode) return val;
                }
            }
        }
        
        return -1;
    }
}
*/
