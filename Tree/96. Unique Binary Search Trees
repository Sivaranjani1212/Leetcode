(0) -> 1
(1) -> 1
(2) -> 2
(3) -> 5
(4) -> 14
(5) -> 42

for example: take n=3
  take 1 as root -> (0) * (2) possible permutations = 2
       2 as root -> (1) * (1) possible permutations = 1
       3 as root -> (2) * (0) possible permuattions = 2
                                                   -------
                                                      5
                                                   -------

permutation concept:
left:root:right
0:1:(2,3,4,5) + (1):2:(3,4,5) + (1,2):3:(4,5) + (1,2,3):4:(5) + (1,2,3,4):5:0





Code:

class Solution {
    public int numTrees(int n) {
      return helper(n);
    }

    // Recrusive Method
    public int helper(int n){
        if(n <= 1) return 1;
        int ans = 0;
        for(int i = 1; i <= n; i++){
            ans += helper(i - 1) * helper(n - i);
        }
        return ans;
    }



// Memoization Method
    public int helperMem(int n, int[] dp){
        if(n <= 1) return 1;
        if(dp[n] != -1) return dp[n];
        int ans = 0;
        for(int i = 1; i <= n; i++){
            ans += helperMem(i - 1, dp) * helperMem(n - i, dp);
        }
        return dp[n] = ans;
    }

     // Tabulation Method
    public int helperTab(int n){
        int[] dp = new int[n + 1];
        // Base Case
        dp[0] = dp[1] = 1;

        // Number of Nodes:- since 0, 1 are handeled in base case so we have remaining 2 to n
        for(int i = 2; i <= n; i++){
            // Number of Roots or Roots Value, j <= i because i is no. of nodes and practically roots can be till number of nodes
            for(int j = 1; j <= i; j++){
                dp[i] += dp[j - 1] * dp[i - j];
            }
        }
        return dp[n];
    }
}
