//dfs  #dynamic

class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root==null) return false;
        return helper(0,root,targetSum);
    }
    public boolean helper(int tot,TreeNode root, int target){
        
        if(root==null) return false;
        if(root.left == null && root.right == null){
            tot = tot + root.val;
            if(tot == target)
                return true;   
        }
        boolean left=helper(tot+root.val,root.left,target);
        boolean right=helper(tot+root.val,root.right,target);
        return left || right;
    }
}
---------------------------------------------------------------------------------------------------------------

//bfs

public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null) return false;
        Queue<Pair<TreeNode, Integer>> q = new LinkedList<>();
        q.offer(new Pair<>(root, targetSum - root.val));
        while (!q.isEmpty()) {
            Pair<TreeNode, Integer> curr = q.poll();
            TreeNode node = curr.getKey();
            int sum = curr.getValue();
            if (sum == 0 && node.left == null && node.right == null) return true;
            if (node.left != null) q.offer(new Pair<>(node.left, sum - node.left.val));
            if (node.right != null) q.offer(new Pair<>(node.right, sum - node.right.val));
        }
        return false;
    }
