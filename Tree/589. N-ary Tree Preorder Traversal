//dfs

class Solution {
    public void req(Node root, List<Integer> tree)
    {
        tree.add(root.val);
        for (Node child : root.children)
        {
            if (child != null)
                req(child, tree);
        }
    }
    public List<Integer> preorder(Node root) {
        List<Integer> tree = new ArrayList<>();
        if (root != null) req(root, tree);
        return tree;
    }
}
------------------------------------------------------------------------------------------------------------
//dfs with stack

class Solution {
    public List<Integer> preorder(Node root) {
        List<Integer> output = new ArrayList<Integer>();
        if (root == null) return output;
        Stack<Node> st = new Stack<>();
        st.push(root);
        while (!st.isEmpty()) {
            Node node = st.pop();
            output.add(node.val);
            for (int idx = node.children.size() - 1; idx >= 0; idx--) {
                Node child = node.children.get(idx);
                st.push(child);
            }
        }
        return output;    
    }
}
