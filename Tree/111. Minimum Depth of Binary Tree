class Solution {
    public int minDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        if(root.left == null || root.right == null){
            return 1+Math.max(minDepth(root.left), minDepth(root.right));
        }
        int height=1+Math.min(minDepth(root.left), minDepth(root.right));
        return height;
    }
}
//dfs
/*
class Solution {
    public int minDepth(TreeNode root) {
        if(root == null){
            return 0;
        } 
        int left = minDepth(root.left)+1;
        int right = minDepth(root.right)+1;
        if(root.left == null){   
            return right;
        }
        if(root.right == null){ 
            return left;
        }
        int depth = Math.min(left,right);
        return depth;
    }
}*/

//bfs
/*
class Solution {
  public int minDepth(TreeNode root) {
    if (root == null) return 0;

    var queue = new ArrayDeque<TreeNode>();
    queue.offer(root);

    for (var depth = 1; !queue.isEmpty(); depth++) {
      for (var i = queue.size(); i > 0; i--) {
        var node = queue.poll();

        if (node.left == null && node.right == null)
          return depth;

        if (node.left != null) queue.offer(node.left);
        if (node.right != null) queue.offer(node.right);
      }
    }
    return -1;
  }
}*/
