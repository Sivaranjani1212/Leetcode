//dfs -> 22%

class Solution {
    public static TreeNode Balance( ArrayList<Integer> list,int st,int end){
        if(st>end){
            return null;
        }
        int mid=(st+end)/2;
        TreeNode root=new TreeNode(list.get(mid));
        root.left=Balance(list,st,mid-1);
        root.right=Balance(list,mid+1,end);
        return root;
    }
    public static void inorder(TreeNode root, ArrayList<Integer> list){
          if(root==null){
            return;
        }
        inorder(root.left,list);
        list.add(root.val);
        inorder(root.right,list);
    }
    public TreeNode balanceBST(TreeNode root) {
        ArrayList<Integer> list =new ArrayList<>();
      if(root==null){
        return null;
      }
        inorder(root,list);
      
        TreeNode root1=Balance(list,0,list.size()-1);
        return root1;
    }
}
----------------------------------------------------------------------------------------------------------------
//dfs -> 95%

class Solution
{
    List<Integer> arrS= new ArrayList<>();
    public void inorder(TreeNode root) 
    {
        if (root == null)
            return;/
        inorder(root.left);
        arrS.add(root.val);/
        inorder(root.right);
        return;
    }
    
    public TreeNode createBST(int low, int high) 
    {
        if(low > high)
           return null;
        
        int mid= low + (high - low)/2;
        int data= arrS.get(mid);
        TreeNode left= createBST(low, mid - 1);
        TreeNode right= createBST(mid + 1, high);
        
        TreeNode node= new TreeNode(data, left, right);
       
        return node; 
    }
    
    public TreeNode balanceBST(TreeNode root) 
    {
        TreeNode rootN= null;
        if(root == null)
            return rootN;
        
        inorder(root);
        rootN= createBST(0, arrS.size() - 1);
        return rootN;
    }
}
