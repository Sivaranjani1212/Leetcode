//dfs

class Solution {
    public TreeNode addOneRow(TreeNode root, int val, int depth) {
         if(depth == 1){
             TreeNode ans = new TreeNode(val);
             ans.left= root;
             return ans;
         }
         process(root, val, 1, depth);
         return root;
    }
    public void process(TreeNode root, int val, int curDepth, int targetDepth){
        if(curDepth == (targetDepth-1)){
            TreeNode curLeft = new TreeNode();
            TreeNode curRight = new TreeNode();
            curLeft.left = root.left;
            curRight.right = root.right;
            curLeft.val = val;
            curRight.val = val;
            root.left=curLeft;
            root.right=curRight;
            return;
        }
        curDepth++;
        if(root.left != null){
            process(root.left, val, curDepth, targetDepth);
        }
        if(root.right != null){
            process(root.right, val, curDepth, targetDepth);
        }
    }
}
--------------------------------------------------------------------------------------------------------------
//bfs

class Solution {
    public TreeNode addOneRow(TreeNode root, int val, int depth) {
        if(depth==1){
            TreeNode temp = new TreeNode(val);
            temp.left=root;
            return temp;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int lvl=2;
        while(!q.isEmpty()){
            int n=q.size();
            for(int i=0;i<n;i++){
                TreeNode root1 = q.poll();
                if(lvl==depth){
                    if(root1.left!=null){
                        TreeNode temp = new TreeNode(val);
                        temp.left=root1.left;
                        root1.left=temp;
                        
                    }
                    if(root1.right!=null){
                        TreeNode temp = new TreeNode(val);
                        temp.right=root1.right;
                        root1.right=temp;
                        
                    }
                    if(root1.left==null){
                        TreeNode temp = new TreeNode(val);
                        root1.left=temp;
                    }
                    if(root1.right==null){
                        TreeNode temp = new TreeNode(val);
                        root1.right=temp;
                    }
                }
                else{
                    if(root1.left!=null){
                        q.add(root1.left);
                    }
                    if(root1.right!=null){
                        q.add(root1.right);
                    }
                }
            }
            lvl++;
            
        }

        return root;
    }
}*/
