class Solution {
    
    Map<Integer , List<Integer>> tree = new HashMap<>();

    int[] parent = null;
    int[] dist = null;

    private void constructTree(int[][] edges){
        int n = edges.length;

        for(int i = 0; i < n; i++){ 

            int n1 = edges[i][0];
            int n2 = edges[i][1]; 

            if(!tree.containsKey(n1)){ 
                tree.put(n1,new ArrayList<>()); 
            }
            if(!tree.containsKey(n2)){ 
                tree.put(n2,new ArrayList<>());
            }
            tree.get(n1).add(n2); 
            tree.get(n2).add(n1); 
        }
    }

    private void dfsToFindParent(int curr , int currParent , int currDist){
        dist[curr] = currDist;
        parent[curr] = currParent;

        for(Integer currNeighbour : tree.get(curr)){
            if(currNeighbour == currParent){ 
                continue;
            }
            dfsToFindParent(currNeighbour , curr , currDist + 1); 
        }

    }

    Set<Integer> visited = new HashSet<>();
    int ans = 0;
    int maxAns = Integer.MIN_VALUE;

    private void dfs(int curr , int[] amount){

        visited.add(curr); 
        ans = ans + amount[curr];  
        int trav = 0; 
        for(Integer currNeighbour : tree.get(curr)){ 
            if(visited.contains(currNeighbour)){
                continue; 
            }
            trav++;
            dfs(currNeighbour,amount); 
        }
        if(trav == 0){ 
        maxAns = Math.max(ans , maxAns); 
        }
        ans = ans - amount[curr]; //backtrack
    }

    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {

        constructTree(edges); 
        int n = edges.length;
        parent = new int[n + 1];
        dist = new int[n + 1];

        Arrays.fill(parent,-1);
        Arrays.fill(dist,-1);

        dfsToFindParent(0,0,0); 

        int curr = bob;  
        int currDist = 0;

        
        while(curr != 0){
            if(dist[curr] > currDist){ 
                amount[curr] = 0; 
            }
            else if(dist[curr] == currDist){
                amount[curr] /= 2;
            }
            curr = parent[curr]; 
            currDist++; 
        }
       
        dfs(0,amount);

        return maxAns; 
    }
}
--------------------------------------------------------------------------------------------------------------------

class Solution {
    static int [] par;
    static int result; 
    static int mostProfitablePath(int[][] edges, int bob, int[] amount) {
        par = new int [amount.length];
        List<List<Integer>> adj = new ArrayList<>();
        result = (int)(-1e9);
        for(int i = 0; i < amount.length; i++) adj.add(new ArrayList<>());
        for(int []edge: edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        setPar(0, adj, -1, par);
        Map<Integer, Integer> bobDist = new HashMap<>();
        int cur = bob, cnt = 0;
        while(cur != par[cur]){
            bobDist.put(cur, cnt++);
            cur = par[cur];
        }
        getResult(0, adj, bobDist, 0, amount, -1, amount[0]);
        return result;
    }

    static void getResult(int node, List<List<Integer>> adj, Map<Integer, Integer> bobDist,
                         int dist, int[] amount, int p, int income) {
        int ans = amount[node];
        boolean flag = true;
        for(int child : adj.get(node)){
            if(child != p){
                if(bobDist.containsKey(child) && dist+1 == bobDist.get(child))
                    getResult(child, adj, bobDist, dist+1, amount, node, amount[child]/2 + income);
                else if(bobDist.get(child) == null || dist + 1 < bobDist.get(child))
                    getResult(child, adj, bobDist, dist+1, amount, node, amount[child] + income);
                else getResult(child, adj, bobDist, dist+1, amount, node, income);
                flag = false;
            }
        }
        if(flag){
            //leaf node.
            result = Math.max(result, income);
        }
    }

    static void setPar(int cur, List<List<Integer>> adj, int p, int [] par){
        for(int child : adj.get(cur)){
            if(child != p){
                par[child] = cur;
                setPar(child, adj, cur, par);
            }
        }
    }
}
