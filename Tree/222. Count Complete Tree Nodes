lass Solution {
  public int countNodes(TreeNode root) {
     if(root == null)
     {
        return 0;
     }

    return countNodes(root.left)+countNodes(root.right)+1;
    
  }
}

/*class Solution {
    ArrayList<Integer> ls = new ArrayList<>();
    public int countNodes(TreeNode root) {
        count(root);
        return ls.size();
    }
    private void count(TreeNode root){
        if(root == null){
            return;
        }
        ls.add(root.val);
        count(root.left);
        count(root.right);
    }
}*/

/*
class Solution 
{
    public int countNodes(TreeNode root) 
    {
        if(root == null) return 0;
        Queue<TreeNode>q=new LinkedList();
        q.add(root);
        int c=0;
        while(!q.isEmpty())
        {
          c++;
          TreeNode r=q.poll();
          if(r.left!=null)
          q.add(r.left);
          if(r.left!=null && r.right!=null)
          q.add(r.right);
        }
        return c;
    }
}*/
