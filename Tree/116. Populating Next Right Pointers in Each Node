//dfs

class Solution {
    public Node connect(Node root) {
        if(root==null)
        return root;

    if(root!=null)
    {
        if(root.left!=null)
        root.left.next=root.right;

        if(root.right!=null && root.next!=null)
        root.right.next=root.next.left;
    }
        connect(root.left);
        connect(root.right);

        return root;
    }
}
------------------------------------------------------------------------------------------------------------------
//dfs

class Solution {
    public Node connect(Node root) {
        if (root == null) return null;
        traverse(root.left, root.right);
        return root;
    }
    void traverse(Node node1, Node node2) {
        if (node1 == null || node2 == null) {
            return;
        }
        node1.next = node2;
        
        traverse(node1.left, node1.right);
        traverse(node2.left, node2.right);
        traverse(node1.right, node2.left);
    }
}
----------------------------------------------------------------------------------------------------------------
//bfs

class Solution {
    public Node connect(Node root) {
        if(root==null) return null;
        Queue<Node> q=new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                 Node curr=q.poll();
                if(i==size-1){
                    curr.next=null;
                }
                else{
                    curr.next= q.peek();
                }
                if(curr.left!=null){
                    q.offer(curr.left);
                }if(curr.right!=null){
                    q.offer(curr.right);
                }
            }
            
        }
        return root;
    }

}*/
