//dfs

class Solution {

ArrayList<ArrayList<Integer>> ans;

public  void burn(TreeNode root,int time,TreeNode exc){
    
  if(root == null || root == exc) return;
  if(ans.size() == time) ans.add(new ArrayList<>());
  ans.get(time).add(root.val);
  burn(root.left,time+1,exc);
  burn(root.right,time+1,exc);
    
}
public int helper(TreeNode root,int tar){

  if(root == null) return -1;
  if(root.val == tar){
      burn(root,0,null);
      return 1;
  }
  int lf = helper(root.left,tar);
  if(lf != -1){
      burn(root,lf,root.left);
      return lf+1;
  }
  int rh = helper(root.right,tar);
   if(rh != -1){
      burn(root,rh,root.right);
      return rh+1;
  }
  return -1;
}
  public int amountOfTime(TreeNode root, int start) {
   ans = new ArrayList<>();
   helper(root,start);   
	  return ans.size()-1;
  }
}
-------------------------------------------------------------------------------------------------------------
//bfs

class Solution {
    public static TreeNode parent_link(TreeNode root,Map<TreeNode,TreeNode>map,int start){
		Queue<TreeNode>q=new LinkedList<>();
		TreeNode res=null;
		q.add(root);

		while(!q.isEmpty()){
			TreeNode cur=q.poll();
			if(cur.val==start) res=cur;

			if(cur.left!=null){
				map.put(cur.left,cur);
				q.add(cur.left);
			}

			if(cur.right!=null){
				map.put(cur.right,cur);
				q.add(cur.right);
			}
		}
		return res;
	}

    public int amountOfTime(TreeNode root, int start) {
        Map<TreeNode,TreeNode>parent_map=new HashMap<>();
        TreeNode target=parent_link(root,parent_map,start);
		
		Map<TreeNode,Boolean>visit=new HashMap<>();
		Queue<TreeNode>qu=new LinkedList<>();

		visit.put(target,true);
		qu.add(target);

		int minTime=0;
		while(!qu.isEmpty()){
			int size=qu.size();

			int flag=0;

			for(int i=0;i<size;i++){
				TreeNode cur=qu.poll();

				if(parent_map.get(cur)!=null && visit.get(parent_map.get(cur))==null){
					flag=1;
					visit.put(parent_map.get(cur),true);
					qu.add(parent_map.get(cur));
				}

				if(cur.left!=null && visit.get(cur.left)==null){
					flag=1;
					visit.put(cur.left,true);
					qu.add(cur.left);
				}

				if(cur.right!=null && visit.get(cur.right)==null){
					flag=1;
					visit.put(cur.right,true);
					qu.add(cur.right);
				}
			}

			if(flag==1) minTime++;
		}
		return minTime;
    }
}
--------------------------------------------------------------------------------------------------------------------
//graph model

public int amountOfTime(TreeNode root, int start) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        createGraph(root, graph);
        return maxDistance(graph, new HashSet<>(), start, 0, 0);
    }

    private void createGraph(TreeNode root, Map<Integer, List<Integer>> graph) {
        List<Integer> adjacent = graph.computeIfAbsent(root.val, parameter -> new ArrayList<>());

        if (root.left != null) {
            graph.computeIfAbsent(root.left.val, param -> new ArrayList<>()).add(root.val);
            adjacent.add(root.left.val);
            createGraph(root.left, graph);
        }
        if (root.right != null) {
            graph.computeIfAbsent(root.right.val, param -> new ArrayList<>()).add(root.val);
            adjacent.add(root.right.val);
            createGraph(root.right, graph);
        }
    }

    private int maxDistance(Map<Integer, List<Integer>> graph, Set<Integer> visited, int currentNode, int maxDistance, int currentDistance) {
        if (!visited.contains(currentNode)) {
            visited.add(currentNode);
            maxDistance = Math.max(maxDistance, currentDistance);

            for (int neighbour : graph.get(currentNode)) {
                maxDistance = Math.max(maxDistance(graph, visited, neighbour, maxDistance, currentDistance + 1), maxDistance);
            }
        }
        return maxDistance;
    }
-------------------------------------------------------------------------------------------------------------------------
//graph bfs
	
		public int amountOfTime(TreeNode root, int start) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        createGraph(root, graph);
        return maxDistance(graph, new LinkedList<>(List.of(start)), new HashSet<>(Set.of(start)));
    }

    private void createGraph(TreeNode root, Map<Integer, List<Integer>> graph) {
        List<Integer> adjacent = graph.computeIfAbsent(root.val, parameter -> new ArrayList<>());

        if (root.left != null) {
            graph.computeIfAbsent(root.left.val, param -> new ArrayList<>()).add(root.val);
            adjacent.add(root.left.val);
            createGraph(root.left, graph);
        }
        if (root.right != null) {
            graph.computeIfAbsent(root.right.val, param -> new ArrayList<>()).add(root.val);
            adjacent.add(root.right.val);
            createGraph(root.right, graph);
        }
    }

    private int maxDistance(Map<Integer, List<Integer>> graph, Queue<Integer> queue, Set<Integer> visited) {
        int maxDistance = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size-- > 0) {
                int currentNode = queue.poll();
                for (int neighbour : graph.get(currentNode)) {
                    if (!visited.contains(neighbour)) {
                        queue.offer(neighbour);
                        visited.add(neighbour);
                    }
                }
            }
            maxDistance++;
        }

        return maxDistance - 1;
    }
