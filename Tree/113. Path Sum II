//dfs #backtracking


class Solution {
    List<List<Integer>> ans = new ArrayList<>();
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        helper(root, 0, targetSum, new ArrayList<>());
        return ans;
    }

    private void helper(TreeNode node, int currSum, int targetSum, ArrayList<Integer> temp) {
        if (node == null) return;
        
        currSum += node.val;
        temp.add(node.val);

        if (node.left == null && node.right == null && currSum == targetSum) {
            ans.add(new ArrayList<>(temp));
        }
    
        helper(node.left, currSum, targetSum, temp);
        helper(node.right, currSum, targetSum, temp);
        temp.remove(temp.size() - 1);
    }
}
