class Solution {
    List<List<Integer>> ans=new LinkedList<List<Integer>>();
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        helper(root,0);
        for(int i=0;i<ans.size();i++){
            if(i%2!=0){
                Collections.reverse(ans.get(i));
            }
        }
        return ans;
    }
    public void helper(TreeNode root,int lvl){
        if(root==null) return;
        if(ans.size()==lvl){
            List<Integer> sub = new LinkedList<Integer>();
            sub.add(root.val);
            ans.add(sub);
        }else{
            ans.get(lvl).add(root.val);
        }
        helper(root.left,lvl+1);
        helper(root.right,lvl+1);
    }
}
/*
have two stack
alternate between reverse not reverse with flag

class Solution {
   

    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {

        List<List<Integer>> res = new ArrayList<>();

        if(root==null)return res;
        Stack<TreeNode> LtoR= new Stack<>();
        Stack<TreeNode> RtoL =new Stack<>();
        LtoR.push(root);

        boolean lefttorigh=false;

        while(!LtoR.isEmpty()||!RtoL.isEmpty())
        {
            List<Integer> temp = new ArrayList<>();
            if(lefttorigh)
             //should be reversed
            {
                while(!RtoL.isEmpty())
                {
                    TreeNode node= RtoL.pop();
                    temp.add(node.val);
                    if(node.left!=null)
                    {
                        LtoR.push(node.left);
                    }
                    if(node.right!=null)
                    {
                        LtoR.push(node.right);
                    }
                }
                Collections.reverse(temp);

                res.add(temp);

                lefttorigh = false;
            }
            else
            
            {
                while(!LtoR.isEmpty()){
                    TreeNode node = LtoR.pop();
                    temp.add(node.val);
                    if(node.right!=null)
                    {
                        RtoL.push(node.right);
                    }
                    if(node.left!=null)
                    {
                        RtoL.push(node.left);

                    }
                }
                Collections.reverse(temp);

                res.add(temp);
                lefttorigh= true;

            }



        }

        return res;


    }

}
*/
