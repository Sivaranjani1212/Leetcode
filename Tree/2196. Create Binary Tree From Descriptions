//create a hashmap and store treenodes

class Solution {
    public TreeNode createBinaryTree(int[][] arr) {
        HashSet<Integer> children = new HashSet<>();
        HashMap<Integer,TreeNode> hp = new HashMap<>();

        int n = arr.length;

        for(int i=0; i<n; i++){
            int parent = arr[i][0];
            int child = arr[i][1];
            int isLeft = arr[i][2];

            children.add(child);
    
            TreeNode a = hp.getOrDefault(parent,new TreeNode(parent));
            
            if(isLeft==1){
                a.left = hp.getOrDefault(child, new TreeNode(child));
                hp.put(child,a.left);
            }else{
                a.right = hp.getOrDefault(child, new TreeNode(child));
                hp.put(child,a.right);
            }
            hp.put(parent,a);
        }

        int root=-1;

        for(int i=0; i<n; i++){
            if(!children.contains(arr[i][0])){
                root = arr[i][0];
                break;
            }
        }
        return hp.getOrDefault(root,null);
    }
}
--------------------------------------------------------------------------------------------------------------------
//build graph, bfs

    public TreeNode createBinaryTree(int[][] descriptions) {
        Set<Integer> kids = new HashSet<>(), parents = new HashSet<>();
        Map<Integer, List<int[]>> parentToKids = new HashMap<>();
        for (int[] d : descriptions) {
            int parent = d[0], kid = d[1];
            parents.add(parent);
            kids.add(kid);
            parentToKids.computeIfAbsent(parent, l -> new ArrayList<>()).add(new int[]{kid, d[2]});
        }
        parents.removeAll(kids);
        TreeNode root = new TreeNode(parents.iterator().next());
        Deque<TreeNode> dq = new ArrayDeque<>();
        dq.offer(root);
        while (!dq.isEmpty()) {
            TreeNode parent = dq.poll();
            for (int[] kidInfo : parentToKids.getOrDefault(parent.val, Arrays.asList())) {
                int kid = kidInfo[0], left = kidInfo[1];
                dq.offer(new TreeNode(kid));
                if (left == 1) {
                    parent.left = dq.peekLast();
                }else {
                    parent.right = dq.peekLast();
                }
            }
        }
        return root;
    }
